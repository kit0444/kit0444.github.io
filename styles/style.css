* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  color-scheme: light dark;

  --mpx: min(calc(1rem / 16), 2px);
  --cmpx: clamp(1px, calc(1rem / 16), 2px);
  --wpx: calc(1vw / 8);
  --vpx: calc(1vh / 16);

  --dark: rgb(32, 32, 32);
  --light: rgb(224, 224, 224);
}

body {
  background-image: linear-gradient(pink, white);
  background-repeat: no-repeat;
  /* background-position: top; */
  background-size: auto calc(150 * var(--cmpx));
}



nav {
}

nav > ul {
  padding-block: clamp(16px, 32 * var(--cmpx), calc(32 * var(--wpx)));
  list-style-type: none;
  max-inline-size: calc(700 * var(--cmpx));
  margin-inline: auto;
  padding-inline: 16px;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  column-gap: calc(12 * var(--cmpx));
  row-gap: calc(16 * var(--cmpx));
  align-content: center;
  flex-wrap: wrap;
}

nav > ul > li {
  font-size: clamp(calc(17 * var(--cmpx)), calc(24 * var(--cmpx)), calc(24 * var(--wpx)));
  display: inline;
}

nav > ul > li > a {
  text-decoration: none;
}

nav > ul > li > a:hover {
  background-color: white;
  box-shadow: 0 0 0 0.5rem white;
}

nav > ul > li > a:hover,
nav > ul > li > a:active {
  color: black;
}

header > hgroup > h1 {
  font-size: calc(32 * var(--cmpx));
}

header > hgroup > h1 + p {
  margin-block-start: calc(12 * var(--cmpx));
}

header > hgroup > p {
  font-size: calc(18 * var(--cmpx));
  font-style: italic;
}

header + main {
  margin-block-start: calc(48 * var(--mpx));
}

wrapper-block {
  display: block;
}

body > wrapper-block {
  margin-block-start: clamp(calc(16 * var(--cmpx)), calc(32 * var(--cmpx)), calc(32 * var(--wpx)));
  max-inline-size: calc(700 * var(--cmpx));
  margin-inline: auto;
  padding-inline: 16px;
}

:is(main, article) > * + :is(dd, dt, figcaption, h1, h2, h3, h4, h5, h6, hgroup, hr, li, p, blockquote, article) {
  margin-block-start: calc(24 * var(--mpx));
}

main .smid {
  text-align: right;
}

article p {
  text-indent: 4ch;
}

.toy {
  /* margin: 1rem 1rem 1rem 1rem; */
}

.toy input,
.toy button {
  /* margin: 0.5rem 0.5rem; */
}

.input__validationProgress {
  display: inline-block;
  inline-size: calc(32 * var(--cmpx));
  block-size: calc(32 * var(--cmpx));
  /* background-color: black; */
  background-image: radial-gradient(circle calc(14 * var(--cmpx)), white 100%, transparent 100%),
                    conic-gradient(white, white 25%, black);

  border-radius: 100%;
  border-width: calc(2 * var(--cmpx));
  border-style: solid;
  border-color: white;
  will-change: transform, opacity, border, color;

  opacity: 0;

  color: black;
  font-size: calc(20 * var(--cmpx));
  font-weight: 900;
  line-height: calc(32 * var(--cmpx));
  text-align: center;
}

.input__validationProgress.input_inputEnded__validationProgress {
  transform: rotate(360deg);
  opacity: revert;

  transition-property: transform, opacity, border;
  transition-duration: 500ms, 0ms, 500ms;
  transition-delay: 500ms, 500ms, 1000ms;

  border-color: black;
}

.input__error {
  visibility: hidden;
  opacity: 0;
}

/* Class "input_inputEnded" To be added when the user first starts to input a value. */
input.input_inputEnded:invalid {
  transition-property: background-color;
  transition-delay: 500ms;
  background-color: pink;
}

.input__error.input_inputEnded__error.input_inputInvalid__error {
  visibility: revert;

  transition-property: opacity;
  transition-delay: 500ms;
  opacity: revert;
}

input {
  block-size: calc(32 * var(--cmpx));
}

button:disabled {
  color: gray;
}

:is(.preview, .toy) {
  padding: 1rem 1rem 1rem 1rem;
  box-shadow: 0 1px 4px 1px pink;
}

.preview > :is(h1, h2, h3, h4, h5, h6, hgroup) a {
  text-decoration-line: none;
}

.preview .nDate {
  text-align: right;
}

a {
  color: var(--dark);
}

img {
  width: 70%;
}

.pcenter {
  text-align: center;
}

@media (prefers-color-scheme: dark) {
  body {
    background-image: none;
    background-color: var(--dark);
    color: var(--light);
  }
  a {
    color: var(--light);
  }
}